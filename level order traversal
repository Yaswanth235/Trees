approach:

Take a queue data structure and push the root node to the queue.
Set a while loop which will run till our queue is non-empty.
In every iteration, pop out from the front of the queue and assign it to a variable (say temp).
If temp has a left child, push it to the queue.
If temp has a right child, push it to the queue.
At last push the value of the temp node to our “ans” data structure.

code:

vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>a;
        if(root==NULL)return a;
         queue<TreeNode*>q;
         q.push(root);
         while(!q.empty()){
             int n=q.size();
             vector<int>s;
             for(int i=0;i<n;i++){
                TreeNode*node=q.front();
                q.pop();
                if(node->left!=NULL)q.push(node->left);
                if(node->right!=NULL)q.push(node->right);
                s.push_back(node->val);
            }
            a.push_back(s);
         }
         return a;
    }
